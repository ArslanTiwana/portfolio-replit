{
  "id": "getting-started-with-nestjs",
  "title": "Getting Started with NestJS: A Comprehensive Guide",
  "excerpt": "Building scalable Node.js applications has never been easier with NestJS. This framework brings the power of TypeScript and enterprise-grade architect...",
  "content": "# Getting Started with NestJS: A Comprehensive Guide\n\nBuilding scalable Node.js applications has never been easier with NestJS. This framework brings the power of TypeScript and enterprise-grade architecture patterns to the Node.js ecosystem.\n\n## Why NestJS?\n\nNestJS is a progressive Node.js framework that leverages TypeScript's powerful type system and incorporates design patterns from Angular. It's built on top of Express (or optionally Fastify) and provides:\n\n- **Modular Architecture**: Clean separation of concerns\n- **Dependency Injection**: Built-in IoC container\n- **Decorators**: Clean, declarative syntax\n- **TypeScript First**: Full type safety out of the box\n\n## Setting Up Your First NestJS Project\n\n```bash\n# Install NestJS CLI\nnpm install -g @nestjs/cli\n\n# Create a new project\nnest new my-project\n\n# Navigate to the project\ncd my-project\n\n# Start the development server\nnpm run start:dev\n```\n\n## Understanding the Architecture\n\n### Controllers\nControllers handle incoming requests and return responses to the client:\n\n```typescript\nimport { Controller, Get, Post, Body } from '@nestjs/common';\n\n@Controller('users')\nexport class UsersController {\n  @Get()\n  findAll() {\n    return 'This returns all users';\n  }\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return 'This creates a new user';\n  }\n}\n```\n\n### Services\nServices contain business logic and are injected into controllers:\n\n```typescript\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService {\n  private users = [];\n\n  findAll() {\n    return this.users;\n  }\n\n  create(user: any) {\n    this.users.push(user);\n    return user;\n  }\n}\n```\n\n### Modules\nModules organize related components together:\n\n```typescript\nimport { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n```\n\n## Database Integration with Prisma\n\nFor database operations, I recommend using Prisma with NestJS:\n\n```bash\n# Install Prisma\nnpm install prisma @prisma/client\n\n# Initialize Prisma\nnpx prisma init\n```\n\nDefine your schema in `prisma/schema.prisma`:\n\n```prisma\nmodel User {\n  id        Int      @id @default(autoincrement())\n  email     String   @unique\n  name      String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n```\n\n## Best Practices\n\n1. **Use DTOs for validation**\n2. **Implement proper error handling**\n3. **Use guards for authentication**\n4. **Structure your modules logically**\n5. **Write comprehensive tests**\n\n## Conclusion\n\nNestJS provides a solid foundation for building scalable server-side applications. Its modular architecture and TypeScript support make it an excellent choice for enterprise applications.\n\nIn the next post, we'll dive deeper into advanced NestJS patterns and database relationships.",
  "author": "Muhammad Arslan",
  "date": "2025-07-05",
  "readTime": "2 min read",
  "tags": [
    "Development",
    "Programming"
  ],
  "slug": "getting-started-with-nestjs",
  "html": "<h1>Getting Started with NestJS: A Comprehensive Guide</h1>\n<p>Building scalable Node.js applications has never been easier with NestJS. This framework brings the power of TypeScript and enterprise-grade architecture patterns to the Node.js ecosystem.</p>\n<h2>Why NestJS?</h2>\n<p>NestJS is a progressive Node.js framework that leverages TypeScript’s powerful type system and incorporates design patterns from Angular. It’s built on top of Express (or optionally Fastify) and provides:</p>\n<ul>\n<li><strong>Modular Architecture</strong>: Clean separation of concerns</li>\n<li><strong>Dependency Injection</strong>: Built-in IoC container</li>\n<li><strong>Decorators</strong>: Clean, declarative syntax</li>\n<li><strong>TypeScript First</strong>: Full type safety out of the box</li>\n</ul>\n<h2>Setting Up Your First NestJS Project</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install NestJS CLI</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> @nestjs/cli\n\n<span class=\"token comment\"># Create a new project</span>\nnest new my-project\n\n<span class=\"token comment\"># Navigate to the project</span>\n<span class=\"token builtin class-name\">cd</span> my-project\n\n<span class=\"token comment\"># Start the development server</span>\n<span class=\"token function\">npm</span> run start:dev\n</code></pre>\n<h2>Understanding the Architecture</h2>\n<h3>Controllers</h3>\n<p>Controllers handle incoming requests and return responses to the client:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get<span class=\"token punctuation\">,</span> Post<span class=\"token punctuation\">,</span> Body <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'This returns all users'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> createUserDto<span class=\"token operator\">:</span> CreateUserDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'This creates a new user'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>Services</h3>\n<p>Services contain business logic and are injected into controllers:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>Modules</h3>\n<p>Modules organize related components together:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./users.controller'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./users.service'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UsersController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UsersService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Database Integration with Prisma</h2>\n<p>For database operations, I recommend using Prisma with NestJS:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install Prisma</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> prisma @prisma/client\n\n<span class=\"token comment\"># Initialize Prisma</span>\nnpx prisma init\n</code></pre>\n<p>Define your schema in <code>prisma/schema.prisma</code>:</p>\n<pre class=\"language-prisma\"><code class=\"language-prisma\">model User {\n  id        Int      @id @default(autoincrement())\n  email     String   @unique\n  name      String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n</code></pre>\n<h2>Best Practices</h2>\n<ol>\n<li><strong>Use DTOs for validation</strong></li>\n<li><strong>Implement proper error handling</strong></li>\n<li><strong>Use guards for authentication</strong></li>\n<li><strong>Structure your modules logically</strong></li>\n<li><strong>Write comprehensive tests</strong></li>\n</ol>\n<h2>Conclusion</h2>\n<p>NestJS provides a solid foundation for building scalable server-side applications. Its modular architecture and TypeScript support make it an excellent choice for enterprise applications.</p>\n<p>In the next post, we’ll dive deeper into advanced NestJS patterns and database relationships.</p>\n"
}