{
  "id": "building-scalable-apis-with-redis",
  "title": "Building Scalable APIs with Redis: Caching and Session Management",
  "excerpt": "Redis is more than just a cache—it's a powerful in-memory data structure store that can dramatically improve your API's performance and scalability. L...",
  "content": "# Building Scalable APIs with Redis: Caching and Session Management\n\nRedis is more than just a cache—it's a powerful in-memory data structure store that can dramatically improve your API's performance and scalability. Let's explore how to leverage Redis effectively in your applications.\n\n## Why Redis for API Scaling?\n\nRedis excels at solving common API scaling challenges:\n\n- **Sub-millisecond response times**\n- **High throughput** (100k+ operations/second)\n- **Rich data structures** (strings, hashes, lists, sets, sorted sets)\n- **Built-in persistence** options\n- **Horizontal scaling** with Redis Cluster\n\n## Setting Up Redis with Node.js\n\n### Installation and Basic Setup\n```bash\n# Install Redis client\nnpm install redis\n\n# Install types for TypeScript\nnpm install -D @types/redis\n```\n\n### Connection Configuration\n```typescript\nimport { createClient } from 'redis';\n\nconst redisClient = createClient({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: parseInt(process.env.REDIS_PORT || '6379'),\n  password: process.env.REDIS_PASSWORD,\n  database: 0,\n});\n\nredisClient.on('error', (err) => {\n  console.error('Redis Client Error:', err);\n});\n\nredisClient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n\nexport default redisClient;\n```\n\n## Caching Strategies\n\n### 1. Cache-Aside Pattern\n```typescript\nclass UserService {\n  private redis = redisClient;\n  \n  async getUser(userId: string): Promise<User> {\n    const cacheKey = `user:${userId}`;\n    \n    // Try cache first\n    const cachedUser = await this.redis.get(cacheKey);\n    if (cachedUser) {\n      return JSON.parse(cachedUser);\n    }\n    \n    // Fetch from database\n    const user = await this.database.findUser(userId);\n    \n    // Cache the result\n    await this.redis.setex(cacheKey, 3600, JSON.stringify(user));\n    \n    return user;\n  }\n}\n```\n\n### 2. Write-Through Caching\n```typescript\nclass ProductService {\n  async updateProduct(productId: string, updates: ProductUpdate): Promise<Product> {\n    // Update database\n    const product = await this.database.updateProduct(productId, updates);\n    \n    // Update cache immediately\n    const cacheKey = `product:${productId}`;\n    await this.redis.setex(cacheKey, 1800, JSON.stringify(product));\n    \n    return product;\n  }\n}\n```\n\n### 3. Cache Invalidation\n```typescript\nclass CacheService {\n  async invalidatePattern(pattern: string): Promise<void> {\n    const keys = await this.redis.keys(pattern);\n    if (keys.length > 0) {\n      await this.redis.del(...keys);\n    }\n  }\n  \n  async invalidateUserCache(userId: string): Promise<void> {\n    await this.invalidatePattern(`user:${userId}*`);\n  }\n}\n```\n\n## Session Management\n\n### Redis Session Store\n```typescript\nimport session from 'express-session';\nimport RedisStore from 'connect-redis';\n\nconst sessionStore = new RedisStore({\n  client: redisClient,\n  prefix: 'sess:',\n  ttl: 86400, // 24 hours\n});\n\napp.use(session({\n  store: sessionStore,\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  rolling: true,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n  },\n}));\n```\n\n### Custom Session Management\n```typescript\nclass SessionManager {\n  private redis = redisClient;\n  \n  async createSession(userId: string, sessionData: any): Promise<string> {\n    const sessionId = this.generateSessionId();\n    const sessionKey = `session:${sessionId}`;\n    \n    const session = {\n      userId,\n      ...sessionData,\n      createdAt: new Date().toISOString(),\n    };\n    \n    await this.redis.setex(sessionKey, 3600, JSON.stringify(session));\n    return sessionId;\n  }\n  \n  async getSession(sessionId: string): Promise<any> {\n    const sessionKey = `session:${sessionId}`;\n    const sessionData = await this.redis.get(sessionKey);\n    \n    if (!sessionData) return null;\n    \n    // Extend session TTL on access\n    await this.redis.expire(sessionKey, 3600);\n    \n    return JSON.parse(sessionData);\n  }\n}\n```\n\n## Rate Limiting with Redis\n\n### Sliding Window Rate Limiter\n```typescript\nclass RateLimiter {\n  private redis = redisClient;\n  \n  async isAllowed(\n    key: string, \n    limit: number, \n    window: number\n  ): Promise<boolean> {\n    const now = Date.now();\n    const pipeline = this.redis.pipeline();\n    \n    // Remove old entries\n    pipeline.zremrangebyscore(key, 0, now - window * 1000);\n    \n    // Count current requests\n    pipeline.zcard(key);\n    \n    // Add current request\n    pipeline.zadd(key, now, now);\n    \n    // Set expiry\n    pipeline.expire(key, window);\n    \n    const results = await pipeline.exec();\n    const count = results[1][1] as number;\n    \n    return count < limit;\n  }\n}\n\n// Usage in middleware\nconst rateLimiter = new RateLimiter();\n\nconst rateLimit = (limit: number, window: number) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const key = `rate_limit:${req.ip}`;\n    const allowed = await rateLimiter.isAllowed(key, limit, window);\n    \n    if (!allowed) {\n      return res.status(429).json({ error: 'Rate limit exceeded' });\n    }\n    \n    next();\n  };\n};\n```\n\n## Advanced Redis Patterns\n\n### 1. Pub/Sub for Real-time Updates\n```typescript\nclass NotificationService {\n  private publisher = redisClient;\n  private subscriber = redisClient.duplicate();\n  \n  async publishUserUpdate(userId: string, update: any): Promise<void> {\n    const channel = `user:${userId}:updates`;\n    await this.publisher.publish(channel, JSON.stringify(update));\n  }\n  \n  subscribeToUserUpdates(userId: string, callback: (update: any) => void): void {\n    const channel = `user:${userId}:updates`;\n    \n    this.subscriber.subscribe(channel, (message) => {\n      const update = JSON.parse(message);\n      callback(update);\n    });\n  }\n}\n```\n\n### 2. Distributed Locks\n```typescript\nclass DistributedLock {\n  private redis = redisClient;\n  \n  async acquireLock(\n    resource: string, \n    ttl: number = 30000\n  ): Promise<string | null> {\n    const lockKey = `lock:${resource}`;\n    const lockValue = this.generateLockValue();\n    \n    const result = await this.redis.set(\n      lockKey, \n      lockValue, \n      'PX', \n      ttl, \n      'NX'\n    );\n    \n    return result === 'OK' ? lockValue : null;\n  }\n  \n  async releaseLock(resource: string, lockValue: string): Promise<boolean> {\n    const lockKey = `lock:${resource}`;\n    \n    const luaScript = `\n      if redis.call(\"get\", KEYS[1]) == ARGV[1] then\n        return redis.call(\"del\", KEYS[1])\n      else\n        return 0\n      end\n    `;\n    \n    const result = await this.redis.eval(luaScript, 1, lockKey, lockValue);\n    return result === 1;\n  }\n}\n```\n\n## Performance Optimization\n\n### 1. Pipeline Operations\n```typescript\nclass BatchOperations {\n  private redis = redisClient;\n  \n  async batchGetUsers(userIds: string[]): Promise<User[]> {\n    const pipeline = this.redis.pipeline();\n    \n    userIds.forEach(userId => {\n      pipeline.get(`user:${userId}`);\n    });\n    \n    const results = await pipeline.exec();\n    \n    return results.map(([err, result]) => {\n      if (err || !result) return null;\n      return JSON.parse(result as string);\n    }).filter(Boolean);\n  }\n}\n```\n\n### 2. Memory Optimization\n```typescript\nclass MemoryOptimizer {\n  // Use hash for related data\n  async setUserProfile(userId: string, profile: UserProfile): Promise<void> {\n    const key = `user:${userId}:profile`;\n    await this.redis.hmset(key, {\n      name: profile.name,\n      email: profile.email,\n      avatar: profile.avatar,\n      lastLogin: profile.lastLogin.toISOString(),\n    });\n  }\n  \n  // Use appropriate data structures\n  async addToRecentlyViewed(userId: string, itemId: string): Promise<void> {\n    const key = `user:${userId}:recent`;\n    await this.redis.lpush(key, itemId);\n    await this.redis.ltrim(key, 0, 9); // Keep only 10 items\n  }\n}\n```\n\n## Monitoring and Debugging\n\n### Redis Monitoring\n```typescript\nclass RedisMonitor {\n  async getRedisStats(): Promise<any> {\n    const info = await redisClient.info();\n    const stats = this.parseRedisInfo(info);\n    \n    return {\n      memory: stats.used_memory_human,\n      connections: stats.connected_clients,\n      operations: stats.total_commands_processed,\n      hitRate: this.calculateHitRate(stats),\n    };\n  }\n  \n  private calculateHitRate(stats: any): number {\n    const hits = parseInt(stats.keyspace_hits);\n    const misses = parseInt(stats.keyspace_misses);\n    return hits / (hits + misses) * 100;\n  }\n}\n```\n\n## Best Practices\n\n### 1. Key Naming Conventions\n```typescript\nconst keys = {\n  user: (id: string) => `user:${id}`,\n  userSessions: (id: string) => `user:${id}:sessions`,\n  rateLimit: (ip: string) => `rate_limit:${ip}`,\n  cache: (namespace: string, key: string) => `cache:${namespace}:${key}`,\n};\n```\n\n### 2. Error Handling\n```typescript\nclass RedisWrapper {\n  private redis = redisClient;\n  \n  async safeGet(key: string): Promise<string | null> {\n    try {\n      return await this.redis.get(key);\n    } catch (error) {\n      console.error('Redis GET error:', error);\n      return null; // Graceful degradation\n    }\n  }\n  \n  async safeSet(key: string, value: string, ttl?: number): Promise<boolean> {\n    try {\n      if (ttl) {\n        await this.redis.setex(key, ttl, value);\n      } else {\n        await this.redis.set(key, value);\n      }\n      return true;\n    } catch (error) {\n      console.error('Redis SET error:', error);\n      return false;\n    }\n  }\n}\n```\n\n## Conclusion\n\nRedis is a powerful tool for building scalable APIs, offering solutions for caching, session management, rate limiting, and real-time features. The key to success is understanding your application's access patterns and choosing the right Redis data structures and patterns.\n\nStart with basic caching, monitor performance, and gradually implement more advanced patterns as your application scales. Remember to always have fallback mechanisms when Redis is unavailable.\n\nIn the next post, we'll explore Redis Cluster setup and advanced scaling techniques for high-availability systems.",
  "author": "Muhammad Arslan",
  "date": "2025-07-05",
  "readTime": "6 min read",
  "tags": [
    "Development",
    "Programming"
  ],
  "slug": "building-scalable-apis-with-redis",
  "html": "<h1>Building Scalable APIs with Redis: Caching and Session Management</h1>\n<p>Redis is more than just a cache—it’s a powerful in-memory data structure store that can dramatically improve your API’s performance and scalability. Let’s explore how to leverage Redis effectively in your applications.</p>\n<h2>Why Redis for API Scaling?</h2>\n<p>Redis excels at solving common API scaling challenges:</p>\n<ul>\n<li><strong>Sub-millisecond response times</strong></li>\n<li><strong>High throughput</strong> (100k+ operations/second)</li>\n<li><strong>Rich data structures</strong> (strings, hashes, lists, sets, sorted sets)</li>\n<li><strong>Built-in persistence</strong> options</li>\n<li><strong>Horizontal scaling</strong> with Redis Cluster</li>\n</ul>\n<h2>Setting Up Redis with Node.js</h2>\n<h3>Installation and Basic Setup</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install Redis client</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> redis\n\n<span class=\"token comment\"># Install types for TypeScript</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> @types/redis\n</code></pre>\n<h3>Connection Configuration</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redis'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> redisClient <span class=\"token operator\">=</span> <span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">REDIS_HOST</span> <span class=\"token operator\">||</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  port<span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">REDIS_PORT</span> <span class=\"token operator\">||</span> <span class=\"token string\">'6379'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">REDIS_PASSWORD</span><span class=\"token punctuation\">,</span>\n  database<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nredisClient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Redis Client Error:'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nredisClient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connected to Redis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> redisClient<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>Caching Strategies</h2>\n<h3>1. Cache-Aside Pattern</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> redis <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> cacheKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Try cache first</span>\n    <span class=\"token keyword\">const</span> cachedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>cachedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// Fetch from database</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>database<span class=\"token punctuation\">.</span><span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Cache the result</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>2. Write-Through Caching</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">updateProduct</span><span class=\"token punctuation\">(</span>productId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> updates<span class=\"token operator\">:</span> ProductUpdate<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Product<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Update database</span>\n    <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>database<span class=\"token punctuation\">.</span><span class=\"token function\">updateProduct</span><span class=\"token punctuation\">(</span>productId<span class=\"token punctuation\">,</span> updates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Update cache immediately</span>\n    <span class=\"token keyword\">const</span> cacheKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">product:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>productId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> <span class=\"token number\">1800</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>3. Cache Invalidation</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CacheService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">invalidatePattern</span><span class=\"token punctuation\">(</span>pattern<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">invalidateUserCache</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">invalidatePattern</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">*</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Session Management</h2>\n<h3>Redis Session Store</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> session <span class=\"token keyword\">from</span> <span class=\"token string\">'express-session'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RedisStore <span class=\"token keyword\">from</span> <span class=\"token string\">'connect-redis'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sessionStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  client<span class=\"token operator\">:</span> redisClient<span class=\"token punctuation\">,</span>\n  prefix<span class=\"token operator\">:</span> <span class=\"token string\">'sess:'</span><span class=\"token punctuation\">,</span>\n  ttl<span class=\"token operator\">:</span> <span class=\"token number\">86400</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 24 hours</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  store<span class=\"token operator\">:</span> sessionStore<span class=\"token punctuation\">,</span>\n  secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SESSION_SECRET</span><span class=\"token punctuation\">,</span>\n  resave<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  saveUninitialized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  rolling<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  cookie<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    secure<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n    httpOnly<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    maxAge<span class=\"token operator\">:</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 24 hours</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>Custom Session Management</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SessionManager</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> redis <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">createSession</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> sessionData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sessionId <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> sessionKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">session:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sessionId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      userId<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>sessionData<span class=\"token punctuation\">,</span>\n      createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>sessionKey<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> sessionId<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span>sessionId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sessionKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">session:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sessionId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> sessionData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sessionKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sessionData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Extend session TTL on access</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>sessionKey<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>sessionData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Rate Limiting with Redis</h2>\n<h3>Sliding Window Rate Limiter</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RateLimiter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> redis <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">isAllowed</span><span class=\"token punctuation\">(</span>\n    key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> \n    limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> \n    window<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pipeline <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Remove old entries</span>\n    pipeline<span class=\"token punctuation\">.</span><span class=\"token function\">zremrangebyscore</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> now <span class=\"token operator\">-</span> window <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Count current requests</span>\n    pipeline<span class=\"token punctuation\">.</span><span class=\"token function\">zcard</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Add current request</span>\n    pipeline<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Set expiry</span>\n    pipeline<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> pipeline<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> count <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Usage in middleware</span>\n<span class=\"token keyword\">const</span> rateLimiter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RateLimiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rateLimit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> window<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> NextFunction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rate_limit:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>ip<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> allowed <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> rateLimiter<span class=\"token punctuation\">.</span><span class=\"token function\">isAllowed</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>allowed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">429</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'Rate limit exceeded'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>Advanced Redis Patterns</h2>\n<h3>1. Pub/Sub for Real-time Updates</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NotificationService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> publisher <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> subscriber <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">.</span><span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">publishUserUpdate</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> update<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:updates</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publisher<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">subscribeToUserUpdates</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>update<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:updates</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> update <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>2. Distributed Locks</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DistributedLock</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> redis <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">acquireLock</span><span class=\"token punctuation\">(</span>\n    resource<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> \n    ttl<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">30000</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> lockKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">lock:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resource<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> lockValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateLockValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>\n      lockKey<span class=\"token punctuation\">,</span> \n      lockValue<span class=\"token punctuation\">,</span> \n      <span class=\"token string\">'PX'</span><span class=\"token punctuation\">,</span> \n      ttl<span class=\"token punctuation\">,</span> \n      <span class=\"token string\">'NX'</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">===</span> <span class=\"token string\">'OK'</span> <span class=\"token operator\">?</span> lockValue <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">releaseLock</span><span class=\"token punctuation\">(</span>resource<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lockValue<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> lockKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">lock:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resource<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> luaScript <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      if redis.call(\"get\", KEYS[1]) == ARGV[1] then\n        return redis.call(\"del\", KEYS[1])\n      else\n        return 0\n      end\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>luaScript<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lockKey<span class=\"token punctuation\">,</span> lockValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Performance Optimization</h2>\n<h3>1. Pipeline Operations</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BatchOperations</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> redis <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">batchGetUsers</span><span class=\"token punctuation\">(</span>userIds<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pipeline <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    userIds<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>userId <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      pipeline<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> pipeline<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>err<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>result <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>2. Memory Optimization</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MemoryOptimizer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use hash for related data</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">setUserProfile</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> profile<span class=\"token operator\">:</span> UserProfile<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:profile</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">hmset</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n      avatar<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">,</span>\n      lastLogin<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>lastLogin<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// Use appropriate data structures</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">addToRecentlyViewed</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> itemId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:recent</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">lpush</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> itemId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">ltrim</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Keep only 10 items</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Monitoring and Debugging</h2>\n<h3>Redis Monitoring</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisMonitor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">getRedisStats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> redisClient<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseRedisInfo</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      memory<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span>used_memory_human<span class=\"token punctuation\">,</span>\n      connections<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span>connected_clients<span class=\"token punctuation\">,</span>\n      operations<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span>total_commands_processed<span class=\"token punctuation\">,</span>\n      hitRate<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculateHitRate</span><span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">private</span> <span class=\"token function\">calculateHitRate</span><span class=\"token punctuation\">(</span>stats<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hits <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">.</span>keyspace_hits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> misses <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">.</span>keyspace_misses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hits <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>hits <span class=\"token operator\">+</span> misses<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Best Practices</h2>\n<h3>1. Key Naming Conventions</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">userSessions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:sessions</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">rateLimit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>ip<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rate_limit:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ip<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">cache</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>namespace<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">cache:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">namespace</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>2. Error Handling</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisWrapper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> redis <span class=\"token operator\">=</span> redisClient<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">safeGet</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Redis GET error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Graceful degradation</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">async</span> <span class=\"token function\">safeSet</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ttl<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> ttl<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Redis SET error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Conclusion</h2>\n<p>Redis is a powerful tool for building scalable APIs, offering solutions for caching, session management, rate limiting, and real-time features. The key to success is understanding your application’s access patterns and choosing the right Redis data structures and patterns.</p>\n<p>Start with basic caching, monitor performance, and gradually implement more advanced patterns as your application scales. Remember to always have fallback mechanisms when Redis is unavailable.</p>\n<p>In the next post, we’ll explore Redis Cluster setup and advanced scaling techniques for high-availability systems.</p>\n"
}