{
  "id": "postgresql-performance-optimization",
  "title": "PostgreSQL Performance Optimization: Advanced Techniques",
  "excerpt": "PostgreSQL is one of the most powerful open-source relational databases, but getting optimal performance requires understanding its internals and appl...",
  "content": "# PostgreSQL Performance Optimization: Advanced Techniques\n\nPostgreSQL is one of the most powerful open-source relational databases, but getting optimal performance requires understanding its internals and applying the right optimization techniques.\n\n## Understanding PostgreSQL Architecture\n\nPostgreSQL uses a multi-process architecture where each connection spawns a separate backend process. This design provides excellent isolation but requires careful tuning for high-concurrency applications.\n\n### Key Components:\n- **Shared Buffers**: Memory cache for frequently accessed pages\n- **WAL (Write-Ahead Logging)**: Ensures data durability\n- **Vacuum Process**: Reclaims storage and updates statistics\n- **Query Planner**: Determines optimal execution plans\n\n## Index Optimization Strategies\n\n### 1. B-Tree Indexes (Default)\n```sql\n-- Basic index for equality lookups\nCREATE INDEX idx_user_email ON users(email);\n\n-- Composite index for multi-column queries\nCREATE INDEX idx_user_status_created ON users(status, created_at);\n```\n\n### 2. Partial Indexes\n```sql\n-- Index only active users\nCREATE INDEX idx_active_users ON users(email) \nWHERE status = 'active';\n\n-- Index only recent orders\nCREATE INDEX idx_recent_orders ON orders(created_at) \nWHERE created_at >= '2024-01-01';\n```\n\n### 3. Expression Indexes\n```sql\n-- Index for case-insensitive searches\nCREATE INDEX idx_user_email_lower ON users(LOWER(email));\n\n-- Index for JSON queries\nCREATE INDEX idx_user_preferences ON users \nUSING GIN ((preferences->'notifications'));\n```\n\n## Query Performance Tuning\n\n### Analyzing Query Plans\n```sql\n-- Analyze query execution\nEXPLAIN ANALYZE SELECT * FROM users \nWHERE email = 'user@example.com';\n\n-- Detailed analysis with buffers\nEXPLAIN (ANALYZE, BUFFERS) SELECT * FROM orders \nWHERE created_at >= '2024-01-01';\n```\n\n### Common Performance Issues\n\n#### 1. N+1 Query Problem\n```sql\n-- Bad: Multiple queries\nSELECT * FROM users WHERE id IN (1, 2, 3);\n-- Then for each user:\nSELECT * FROM orders WHERE user_id = ?;\n\n-- Good: Single join query\nSELECT u.*, o.* FROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nWHERE u.id IN (1, 2, 3);\n```\n\n#### 2. Missing WHERE Clause Optimization\n```sql\n-- Bad: No index usage\nSELECT * FROM orders WHERE EXTRACT(YEAR FROM created_at) = 2024;\n\n-- Good: Index-friendly query\nSELECT * FROM orders \nWHERE created_at >= '2024-01-01' AND created_at < '2025-01-01';\n```\n\n## Advanced PostgreSQL Features\n\n### 1. JSONB Performance\n```sql\n-- Create GIN index for JSONB\nCREATE INDEX idx_user_metadata ON users USING GIN(metadata);\n\n-- Efficient JSONB queries\nSELECT * FROM users \nWHERE metadata @> '{\"premium\": true}';\n```\n\n### 2. Full-Text Search\n```sql\n-- Create text search index\nCREATE INDEX idx_article_search ON articles \nUSING GIN(to_tsvector('english', title || ' ' || content));\n\n-- Search query\nSELECT * FROM articles \nWHERE to_tsvector('english', title || ' ' || content) \n@@ plainto_tsquery('english', 'nestjs typescript');\n```\n\n### 3. Common Table Expressions (CTEs)\n```sql\n-- Recursive CTE for hierarchical data\nWITH RECURSIVE category_tree AS (\n  SELECT id, name, parent_id, 1 as level\n  FROM categories WHERE parent_id IS NULL\n  \n  UNION ALL\n  \n  SELECT c.id, c.name, c.parent_id, ct.level + 1\n  FROM categories c\n  JOIN category_tree ct ON c.parent_id = ct.id\n)\nSELECT * FROM category_tree ORDER BY level, name;\n```\n\n## Connection Pooling and Scaling\n\n### PgBouncer Configuration\n```ini\n[databases]\nmyapp = host=localhost port=5432 dbname=myapp\n\n[pgbouncer]\nlisten_port = 6432\nlisten_addr = *\nauth_type = md5\nauth_file = /etc/pgbouncer/userlist.txt\npool_mode = transaction\nmax_client_conn = 100\ndefault_pool_size = 25\n```\n\n### Connection Pool Best Practices\n1. **Use transaction-level pooling** for web applications\n2. **Set appropriate pool sizes** based on CPU cores\n3. **Monitor connection usage** with pg_stat_activity\n4. **Implement connection retry logic** in your application\n\n## Configuration Tuning\n\n### Key Parameters to Optimize\n```sql\n-- Memory settings\nshared_buffers = 256MB              -- 25% of RAM\nwork_mem = 4MB                      -- Per-operation memory\nmaintenance_work_mem = 64MB         -- For VACUUM, CREATE INDEX\n\n-- Checkpoint settings\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\nmax_wal_size = 1GB\n\n-- Query planner settings\nrandom_page_cost = 1.1              -- For SSD storage\neffective_cache_size = 1GB          -- Available OS cache\n```\n\n## Monitoring and Maintenance\n\n### Essential Monitoring Queries\n```sql\n-- Check slow queries\nSELECT query, calls, total_time, mean_time \nFROM pg_stat_statements \nORDER BY total_time DESC LIMIT 10;\n\n-- Monitor index usage\nSELECT schemaname, tablename, indexname, idx_scan, idx_tup_read\nFROM pg_stat_user_indexes \nWHERE idx_scan = 0;\n\n-- Check table bloat\nSELECT schemaname, tablename, \n       pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size\nFROM pg_tables \nWHERE schemaname NOT IN ('information_schema', 'pg_catalog')\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n```\n\n### Maintenance Tasks\n```sql\n-- Update table statistics\nANALYZE;\n\n-- Reclaim storage space\nVACUUM FULL;\n\n-- Rebuild indexes\nREINDEX INDEX idx_user_email;\n```\n\n## Conclusion\n\nPostgreSQL performance optimization is an ongoing process that requires understanding your application's query patterns and data access needs. Start with proper indexing, monitor query performance, and gradually fine-tune configuration parameters.\n\nRemember: **Measure first, optimize second**. Always use EXPLAIN ANALYZE to understand query performance before making changes.\n\nIn the next post, we'll explore PostgreSQL's advanced features like partitioning and replication for high-availability systems.",
  "author": "Muhammad Arslan",
  "date": "2025-07-05",
  "readTime": "4 min read",
  "tags": [
    "Development",
    "Programming"
  ],
  "slug": "postgresql-performance-optimization",
  "html": "<h1>PostgreSQL Performance Optimization: Advanced Techniques</h1>\n<p>PostgreSQL is one of the most powerful open-source relational databases, but getting optimal performance requires understanding its internals and applying the right optimization techniques.</p>\n<h2>Understanding PostgreSQL Architecture</h2>\n<p>PostgreSQL uses a multi-process architecture where each connection spawns a separate backend process. This design provides excellent isolation but requires careful tuning for high-concurrency applications.</p>\n<h3>Key Components:</h3>\n<ul>\n<li><strong>Shared Buffers</strong>: Memory cache for frequently accessed pages</li>\n<li><strong>WAL (Write-Ahead Logging)</strong>: Ensures data durability</li>\n<li><strong>Vacuum Process</strong>: Reclaims storage and updates statistics</li>\n<li><strong>Query Planner</strong>: Determines optimal execution plans</li>\n</ul>\n<h2>Index Optimization Strategies</h2>\n<h3>1. B-Tree Indexes (Default)</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Basic index for equality lookups</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_user_email <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Composite index for multi-column queries</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_user_status_created <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">(</span><span class=\"token keyword\">status</span><span class=\"token punctuation\">,</span> created_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>2. Partial Indexes</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Index only active users</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_active_users <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">=</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Index only recent orders</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_recent_orders <span class=\"token keyword\">ON</span> orders<span class=\"token punctuation\">(</span>created_at<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">WHERE</span> created_at <span class=\"token operator\">>=</span> <span class=\"token string\">'2024-01-01'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>3. Expression Indexes</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Index for case-insensitive searches</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_user_email_lower <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">(</span>LOWER<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Index for JSON queries</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_user_preferences <span class=\"token keyword\">ON</span> users \n<span class=\"token keyword\">USING</span> GIN <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>preferences<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token string\">'notifications'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>Query Performance Tuning</h2>\n<h3>Analyzing Query Plans</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Analyze query execution</span>\n<span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">ANALYZE</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users \n<span class=\"token keyword\">WHERE</span> email <span class=\"token operator\">=</span> <span class=\"token string\">'user@example.com'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Detailed analysis with buffers</span>\n<span class=\"token keyword\">EXPLAIN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">ANALYZE</span><span class=\"token punctuation\">,</span> BUFFERS<span class=\"token punctuation\">)</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> orders \n<span class=\"token keyword\">WHERE</span> created_at <span class=\"token operator\">>=</span> <span class=\"token string\">'2024-01-01'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>Common Performance Issues</h3>\n<h4>1. N+1 Query Problem</h4>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Bad: Multiple queries</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- Then for each user:</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> orders <span class=\"token keyword\">WHERE</span> user_id <span class=\"token operator\">=</span> ?<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Good: Single join query</span>\n<span class=\"token keyword\">SELECT</span> u<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users u\n<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> orders o <span class=\"token keyword\">ON</span> u<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>user_id\n<span class=\"token keyword\">WHERE</span> u<span class=\"token punctuation\">.</span>id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4>2. Missing WHERE Clause Optimization</h4>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Bad: No index usage</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> orders <span class=\"token keyword\">WHERE</span> EXTRACT<span class=\"token punctuation\">(</span><span class=\"token keyword\">YEAR</span> <span class=\"token keyword\">FROM</span> created_at<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2024</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Good: Index-friendly query</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> orders \n<span class=\"token keyword\">WHERE</span> created_at <span class=\"token operator\">>=</span> <span class=\"token string\">'2024-01-01'</span> <span class=\"token operator\">AND</span> created_at <span class=\"token operator\">&lt;</span> <span class=\"token string\">'2025-01-01'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>Advanced PostgreSQL Features</h2>\n<h3>1. JSONB Performance</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Create GIN index for JSONB</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_user_metadata <span class=\"token keyword\">ON</span> users <span class=\"token keyword\">USING</span> GIN<span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Efficient JSONB queries</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users \n<span class=\"token keyword\">WHERE</span> metadata @<span class=\"token operator\">></span> <span class=\"token string\">'{\"premium\": true}'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>2. Full-Text Search</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Create text search index</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_article_search <span class=\"token keyword\">ON</span> articles \n<span class=\"token keyword\">USING</span> GIN<span class=\"token punctuation\">(</span>to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">'english'</span><span class=\"token punctuation\">,</span> title <span class=\"token operator\">||</span> <span class=\"token string\">' '</span> <span class=\"token operator\">||</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Search query</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> articles \n<span class=\"token keyword\">WHERE</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">'english'</span><span class=\"token punctuation\">,</span> title <span class=\"token operator\">||</span> <span class=\"token string\">' '</span> <span class=\"token operator\">||</span> content<span class=\"token punctuation\">)</span> \n@@ plainto_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">'english'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nestjs typescript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>3. Common Table Expressions (CTEs)</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Recursive CTE for hierarchical data</span>\n<span class=\"token keyword\">WITH</span> RECURSIVE category_tree <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> parent_id<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">level</span>\n  <span class=\"token keyword\">FROM</span> categories <span class=\"token keyword\">WHERE</span> parent_id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span>\n  \n  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n  \n  <span class=\"token keyword\">SELECT</span> c<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>parent_id<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">.</span><span class=\"token keyword\">level</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">FROM</span> categories c\n  <span class=\"token keyword\">JOIN</span> category_tree ct <span class=\"token keyword\">ON</span> c<span class=\"token punctuation\">.</span>parent_id <span class=\"token operator\">=</span> ct<span class=\"token punctuation\">.</span>id\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> category_tree <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token keyword\">level</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>Connection Pooling and Scaling</h2>\n<h3>PgBouncer Configuration</h3>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">databases</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">myapp</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">host=localhost port=5432 dbname=myapp</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">pgbouncer</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">listen_port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">6432</span>\n<span class=\"token key attr-name\">listen_addr</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">*</span>\n<span class=\"token key attr-name\">auth_type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">md5</span>\n<span class=\"token key attr-name\">auth_file</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/etc/pgbouncer/userlist.txt</span>\n<span class=\"token key attr-name\">pool_mode</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">transaction</span>\n<span class=\"token key attr-name\">max_client_conn</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">100</span>\n<span class=\"token key attr-name\">default_pool_size</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">25</span>\n</code></pre>\n<h3>Connection Pool Best Practices</h3>\n<ol>\n<li><strong>Use transaction-level pooling</strong> for web applications</li>\n<li><strong>Set appropriate pool sizes</strong> based on CPU cores</li>\n<li><strong>Monitor connection usage</strong> with pg_stat_activity</li>\n<li><strong>Implement connection retry logic</strong> in your application</li>\n</ol>\n<h2>Configuration Tuning</h2>\n<h3>Key Parameters to Optimize</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Memory settings</span>\nshared_buffers <span class=\"token operator\">=</span> <span class=\"token number\">256</span>MB              <span class=\"token comment\">-- 25% of RAM</span>\nwork_mem <span class=\"token operator\">=</span> <span class=\"token number\">4</span>MB                      <span class=\"token comment\">-- Per-operation memory</span>\nmaintenance_work_mem <span class=\"token operator\">=</span> <span class=\"token number\">64</span>MB         <span class=\"token comment\">-- For VACUUM, CREATE INDEX</span>\n\n<span class=\"token comment\">-- Checkpoint settings</span>\ncheckpoint_completion_target <span class=\"token operator\">=</span> <span class=\"token number\">0.9</span>\nwal_buffers <span class=\"token operator\">=</span> <span class=\"token number\">16</span>MB\nmax_wal_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span>GB\n\n<span class=\"token comment\">-- Query planner settings</span>\nrandom_page_cost <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span>              <span class=\"token comment\">-- For SSD storage</span>\neffective_cache_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span>GB          <span class=\"token comment\">-- Available OS cache</span>\n</code></pre>\n<h2>Monitoring and Maintenance</h2>\n<h3>Essential Monitoring Queries</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Check slow queries</span>\n<span class=\"token keyword\">SELECT</span> query<span class=\"token punctuation\">,</span> calls<span class=\"token punctuation\">,</span> total_time<span class=\"token punctuation\">,</span> mean_time \n<span class=\"token keyword\">FROM</span> pg_stat_statements \n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> total_time <span class=\"token keyword\">DESC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Monitor index usage</span>\n<span class=\"token keyword\">SELECT</span> schemaname<span class=\"token punctuation\">,</span> tablename<span class=\"token punctuation\">,</span> indexname<span class=\"token punctuation\">,</span> idx_scan<span class=\"token punctuation\">,</span> idx_tup_read\n<span class=\"token keyword\">FROM</span> pg_stat_user_indexes \n<span class=\"token keyword\">WHERE</span> idx_scan <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Check table bloat</span>\n<span class=\"token keyword\">SELECT</span> schemaname<span class=\"token punctuation\">,</span> tablename<span class=\"token punctuation\">,</span> \n       pg_size_pretty<span class=\"token punctuation\">(</span>pg_total_relation_size<span class=\"token punctuation\">(</span>schemaname<span class=\"token operator\">||</span><span class=\"token string\">'.'</span><span class=\"token operator\">||</span>tablename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> size\n<span class=\"token keyword\">FROM</span> pg_tables \n<span class=\"token keyword\">WHERE</span> schemaname <span class=\"token operator\">NOT</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'information_schema'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pg_catalog'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> pg_total_relation_size<span class=\"token punctuation\">(</span>schemaname<span class=\"token operator\">||</span><span class=\"token string\">'.'</span><span class=\"token operator\">||</span>tablename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>Maintenance Tasks</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Update table statistics</span>\n<span class=\"token keyword\">ANALYZE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Reclaim storage space</span>\nVACUUM <span class=\"token keyword\">FULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Rebuild indexes</span>\nREINDEX <span class=\"token keyword\">INDEX</span> idx_user_email<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>Conclusion</h2>\n<p>PostgreSQL performance optimization is an ongoing process that requires understanding your application’s query patterns and data access needs. Start with proper indexing, monitor query performance, and gradually fine-tune configuration parameters.</p>\n<p>Remember: <strong>Measure first, optimize second</strong>. Always use EXPLAIN ANALYZE to understand query performance before making changes.</p>\n<p>In the next post, we’ll explore PostgreSQL’s advanced features like partitioning and replication for high-availability systems.</p>\n"
}